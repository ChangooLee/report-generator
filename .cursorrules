# Cursor AI 코딩 규칙
# 이 프로젝트에서 AI 어시스턴트가 따라야 할 영구적인 규칙들

## 🚫 금지된 표현들 (절대 사용 금지)

### 과한 수식어
- "real", "Real", "진짜", "실제", "actual"
- "super", "ultra", "mega", "hyper"
- "amazing", "awesome", "fantastic", "incredible"
- "powerful", "robust", "advanced", "intelligent"

### 마케팅 표현
- "혁신적인", "혁명적인", "획기적인"
- "완벽한", "최고의", "최적의"
- "magic", "smart", "genius"

## ✅ 권장 표현들

### 클래스/함수명
- 간결하고 목적이 명확한 이름
- 예: `BrowserAgent`, `WorkflowManager`, `DataProcessor`
- 금지: `RealBrowserAgent`, `SmartWorkflowManager`, `PowerfulDataProcessor`

### 주석/문서
- 기능을 정확히 설명
- 과장 없이 사실만 기술
- 예: "브라우저에서 HTML 테스트", "데이터 분석 수행"
- 금지: "진짜 브라우저에서 완벽한 HTML 테스트", "실제 데이터를 혁신적으로 분석"

### 로그 메시지
- 간결하고 정보성 있게
- 예: "✅ 테스트 완료", "📊 데이터 수집 중"
- 금지: "✅ 진짜 완벽한 테스트 완료", "📊 실제 데이터를 혁신적으로 수집 중"

## 📋 네이밍 컨벤션

### 파일명
- snake_case 사용
- 목적이 명확한 이름
- 예: `browser_agent.py`, `data_processor.py`

### 클래스명
- PascalCase 사용
- 간결하고 명확
- 예: `BrowserAgent`, `LLMClient`

### 함수명
- snake_case 사용
- 동작을 명확히 표현
- 예: `test_html()`, `process_data()`

### 변수명
- snake_case 사용
- 의미가 명확한 이름
- 예: `test_result`, `user_query`

## 🎯 코드 품질 원칙

### 1. 단순함 (Simplicity)
- 복잡한 로직보다 명확한 로직
- 한 함수는 한 가지 역할만

### 2. 명확성 (Clarity)
- 코드만 봐도 이해 가능
- 과도한 주석보다 명확한 코드

### 3. 일관성 (Consistency)
- 프로젝트 전체에서 동일한 패턴
- 네이밍 규칙 일관성 유지

### 4. 실용성 (Pragmatism)
- 과도한 추상화 피하기
- 실제 필요에 맞는 구현

## 🔧 기술적 가이드라인

### Import 순서
1. 표준 라이브러리
2. 서드파티 라이브러리  
3. 로컬 모듈

### 주석 스타일
```python
"""
Module/Class/Function 설명
간결하고 명확하게 목적 기술
"""

# 한 줄 주석: 필요시에만 간결하게
```

### 에러 메시지
- 구체적이고 해결 방향 제시
- 예: "Chart.js 라이브러리가 로드되지 않음"
- 금지: "진짜 완벽한 차트 시스템에서 예상치 못한 오류 발생"

## 🚨 강제 적용

이 규칙들은 **반드시** 모든 코드 생성, 수정, 리뷰에서 적용되어야 합니다.
규칙을 위반하는 코드나 제안은 **즉시 수정**해야 합니다.

AI 어시스턴트는 이 규칙들을 **영구적으로 기억**하고 모든 응답에 적용해야 합니다. 